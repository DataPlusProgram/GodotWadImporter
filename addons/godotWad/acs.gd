extends Node
class_name OpcodeMapper

enum  SCRIPT{
	NUMBER,
	OFFSET,
	ARG_COUNT
}

var staack : PackedByteArray = []

# Dictionary mapping opcode values to their string names without the "PCD_" prefix
var opcodeMap: PackedStringArray =[
	"NOP",
	"TERMINATE",
	"SUSPEND",
	"PUSHNUMBER",
	"LSPEC1",
	"LSPEC2",
	"LSPEC3",
	"LSPEC4",
	"LSPEC5",
	"LSPEC1DIRECT",
	"LSPEC2DIRECT",
	"LSPEC3DIRECT",
	"LSPEC4DIRECT",
	"LSPEC5DIRECT",
	"ADD",
	"SUBTRACT",
	"MULTIPLY",
	"DIVIDE",
	"MODULUS",
	"EQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"ASSIGNSCRIPTVAR",
	"ASSIGNMAPVAR",
	"ASSIGNWORLDVAR",
	"PUSHSCRIPTVAR",
	"PUSHMAPVAR",
	"PUSHWORLDVAR",
	"ADDSCRIPTVAR",
	"ADDMAPVAR",
	"ADDWORLDVAR",
	"SUBSCRIPTVAR",
	"SUBMAPVAR",
	"SUBWORLDVAR",
	"MULSCRIPTVAR",
	"MULMAPVAR",
	"MULWORLDVAR",
	"DIVSCRIPTVAR",
	"DIVMAPVAR",
	"DIVWORLDVAR",
	"MODSCRIPTVAR",
	"MODMAPVAR",
	"MODWORLDVAR",
	"INCSCRIPTVAR",
	"INCMAPVAR",
	"INCWORLDVAR",
	"DECSCRIPTVAR",
	"DECMAPVAR",
	"DECWORLDVAR",
	"GOTO",
	"IFGOTO",
	"DROP",
	"DELAY",
	"DELAYDIRECT",
	"RANDOM",
	"RANDOMDIRECT",
	"THINGCOUNT",
	"THINGCOUNTDIRECT",
	"TAGWAIT",
	"TAGWAITDIRECT",
	"POLYWAIT",
	"POLYWAITDIRECT",
	"CHANGEFLOOR",
	"CHANGEFLOORDIRECT",
	"CHANGECEILING",
	"CHANGECEILINGDIRECT",
	"RESTART",
	"ANDLOGICAL",
	"ORLOGICAL",
	"ANDBITWISE",
	"ORBITWISE",
	"EORBITWISE",
	"NEGATELOGICAL",
	"LSHIFT",
	"RSHIFT",
	"UNARYMINUS",
	"IFNOTGOTO",
	"LINESIDE",
	"SCRIPTWAIT",
	"SCRIPTWAITDIRECT",
	"CLEARLINESPECIAL",
	"CASEGOTO",
	"BEGINPRINT",
	"ENDPRINT",
	"PRINTSTRING",
	"PRINTNUMBER",
	"PRINTCHARACTER",
	"PLAYERCOUNT",
	"GAMETYPE",
	"GAMESKILL",
	"TIMER",
	"SECTORSOUND",
	"AMBIENTSOUND",
	"SOUNDSEQUENCE",
	"SETLINETEXTURE",
	"SETLINEBLOCKING",
	"SETLINESPECIAL",
	"THINGSOUND",
	"ENDPRINTBOLD",
	"PLAYERBLUESKULL",
	"PLAYERREDSKULL",
	"PLAYERYELLOWSKULL",
	"PLAYERMASTERSKULL",
	"PLAYERBLUECARD",
	"PLAYERREDCARD",
	"PLAYERYELLOWCARD",
	"PLAYERMASTERCARD",
	"PLAYERBLACKSKULL",
	"PLAYERSILVERSKULL",
	"PLAYERGOLDSKULL",
	"PLAYERBLACKCARD",
	"PLAYERSILVERCARD",
	"ISNETWORKGAME",
	"PLAYERTEAM",
	"PLAYERHEALTH",
	"PLAYERARMORPOINTS",
	"PLAYERFRAGS",
	"PLAYEREXPERT",
	"BLUETEAMCOUNT",
	"REDTEAMCOUNT",
	"BLUETEAMSCORE",
	"REDTEAMSCORE",
	"ISONEFLAGCTF",
	"GETINVASIONWAVE",
	"GETINVASIONSTATE",
	"PRINTNAME",
	"MUSICCHANGE",
	"CONSOLECOMMANDDIRECT",
	"CONSOLECOMMAND",
	"SINGLEPLAYER",
	"FIXEDMUL",
	"FIXEDDIV",
	"SETGRAVITY",
	"SETGRAVITYDIRECT",
	"SETAIRCONTROL",
	"SETAIRCONTROLDIRECT",
	"CLEARINVENTORY",
	"GIVEINVENTORY",
	"GIVEINVENTORYDIRECT",
	"TAKEINVENTORY",
	"TAKEINVENTORYDIRECT",
	"CHECKINVENTORY",
	"CHECKINVENTORYDIRECT",
	"SPAWN",
	"SPAWNDIRECT",
	"SPAWNSPOT",
	"SPAWNSPOTDIRECT",
	"SETMUSIC",
	"SETMUSICDIRECT",
	"LOCALSETMUSIC",
	"LOCALSETMUSICDIRECT",
	"PRINTFIXED",
	"PRINTLOCALIZED",
	"MOREHUDMESSAGE",
	"OPTHUDMESSAGE",
	"ENDHUDMESSAGE",
	"ENDHUDMESSAGEBOLD",
	"SETSTYLE",
	"SETSTYLEDIRECT",
	"SETFONT",
	"SETFONTDIRECT",
	"PUSHBYTE",
	"LSPEC1DIRECTB",
	"LSPEC2DIRECTB",
	"LSPEC3DIRECTB",
	"LSPEC4DIRECTB",
	"LSPEC5DIRECTB",
	"DELAYDIRECTB",
	"RANDOMDIRECTB",
	"PUSHBYTES",
	"PUSH2BYTES",
	"PUSH3BYTES",
	"PUSH4BYTES",
	"PUSH5BYTES",
	"SETTHINGSPECIAL",
	"ASSIGNGLOBALVAR",
	"PUSHGLOBALVAR",
	"ADDGLOBALVAR",
	"SUBGLOBALVAR",
	"MULGLOBALVAR",
	"DIVGLOBALVAR",
	"MODGLOBALVAR",
	"INCGLOBALVAR",
	"DECGLOBALVAR",
	"FADETO",
	"FADERANGE",
	"CANCELFADE",
	"PLAYMOVIE",
	"SETFLOORTRIGGER",
	"SETCEILINGTRIGGER",
	"GETACTORX",
	"GETACTORY",
	"GETACTORZ",
	"STARTTRANSLATION",
	"TRANSLATIONRANGE1",
	"TRANSLATIONRANGE2",
	"ENDTRANSLATION",
	"CALL",
	"CALLDISCARD",
	"RETURNVOID",
	"RETURNVAL",
	"PUSHMAPARRAY",
	"ASSIGNMAPARRAY",
	"ADDMAPARRAY",
	"SUBMAPARRAY",
	"MULMAPARRAY",
	"DIVMAPARRAY",
	"MODMAPARRAY",
	"INCMAPARRAY",
	"DECMAPARRAY",
	"DUP",
	"SWAP",
	"WRITETOINI",
	"GETFROMINI",
	"SIN",
	"COS",
	"VECTORANGLE",
	"CHECKWEAPON",
	"SETWEAPON",
	"TAGSTRING",
	"PUSHWORLDARRAY",
	"ASSIGNWORLDARRAY",
	"ADDWORLDARRAY",
	"SUBWORLDARRAY",
	"MULWORLDARRAY",
	"DIVWORLDARRAY",
	"MODWORLDARRAY",
	"INCWORLDARRAY",
	"DECWORLDARRAY",
	"PUSHGLOBALARRAY",
	"ASSIGNGLOBALARRAY",
	"ADDGLOBALARRAY",
	"SUBGLOBALARRAY",
	"MULGLOBALARRAY",
	"DIVGLOBALARRAY",
	"MODGLOBALARRAY",
	"INCGLOBALARRAY",
	"DECGLOBALARRAY",
	"SETMARINEWEAPON",
	"SETACTORPROPERTY",
	"GETACTORPROPERTY",
	"PLAYERNUMBER",
	"ACTIVATORTID",
	"SETMARINESPRITE",
	"GETSCREENWIDTH",
	"GETSCREENHEIGHT",
	"THING_PROJECTILE2",
	"STRLEN",
	"SETHUDSIZE",
	"GETCVAR",
	"CASEGOTOSORTED",
	"SETRESULTVALUE",
	"GETLINEROWOFFSET",
	"GETACTORFLOORZ",
	"GETACTORANGLE",
	"GETSECTORFLOORZ",
	"GETSECTORCEILINGZ",
	"LSPEC5RESULT",
	"GETSIGILPIECES",
	"GETLEVELINFO",
	"CHANGESKY",
	"PLAYERINGAME",
	"PLAYERISBOT",
	"SETCAMERATOTEXTURE",
	"ENDLOG",
	"GETAMMOCAPACITY",
	"SETAMMOCAPACITY",
	"PRINTMAPCHARARRAY",
	"PRINTWORLDCHARARRAY",
	"PRINTGLOBALCHARARRAY",
	"SETACTORANGLE",
	"GRABINPUT",
	"SETMOUSEPOINTER",
	"MOVEMOUSEPOINTER",
	"SPAWNPROJECTILE",
	"GETSECTORLIGHTLEVEL",
	"GETACTORCEILINGZ",
	"SETACTORPOSITION",
	"CLEARACTORINVENTORY",
	"GIVEACTORINVENTORY",
	"TAKEACTORINVENTORY",
	"CHECKACTORINVENTORY",
	"THINGCOUNTNAME",
	"SPAWNSPOTFACING",
	"PLAYERCLASS",
	"ANDSCRIPTVAR",
	"ANDMAPVAR",
	"ANDWORLDVAR",
	"ANDGLOBALVAR",
	"ANDMAPARRAY",
	"ANDWORLDARRAY",
	"ANDGLOBALARRAY",
	"EORSCRIPTVAR",
	"EORMAPVAR",
	"EORWORLDVAR",
	"EORGLOBALVAR",
	"EORMAPARRAY",
	"EORWORLDARRAY",
	"EORGLOBALARRAY",
	"ORSCRIPTVAR",
	"ORMAPVAR",
	"ORWORLDVAR",
	"ORGLOBALVAR",
	"ORMAPARRAY",
	"ORWORLDARRAY",
	"ORGLOBALARRAY",
	"LSSCRIPTVAR",
	"LSMAPVAR",
	"LSWORLDVAR",
	"LSGLOBALVAR",
	"LSMAPARRAY",
	"LSWORLDARRAY",
	"LSGLOBALARRAY",
	"RSSCRIPTVAR",
	"RSMAPVAR",
	"RSWORLDVAR",
	"RSGLOBALVAR",
	"RSMAPARRAY",
	"RSWORLDARRAY",
	"RSGLOBALARRAY",
	"GETPLAYERINFO",
	"CHANGELEVEL",
	"SECTORDAMAGE",
	"REPLACETEXTURES",
	"NEGATEBINARY",
	"GETACTORPITCH",
	"SETACTORPITCH",
	"PRINTBIND",
	"SETACTORSTATE",
	"THINGDAMAGE2",
	"USEINVENTORY",
	"USEACTORINVENTORY",
	"CHECKACTORCEILINGTEXTURE",
	"CHECKACTORFLOORTEXTURE",
	"GETACTORLIGHTLEVEL",
	"SETMUGSHOTSTATE",
	"THINGCOUNTSECTOR",
	"THINGCOUNTNAMESECTOR",
	"CHECKPLAYERCAMERA",
	"MORPHACTOR",
	"UNMORPHACTOR",
	"GETPLAYERINPUT",
	"CLASSIFYACTOR",
	"PRINTBINARY",
	"PRINTHEX",
	"CALLFUNC",
	"SAVESTRING",
	"PRINTMAPCHRANGE",
	"PRINTWORLDCHRANGE",
	"PRINTGLOBALCHRANGE",
	"STRCPYTOMAPCHRANGE",
	"STRCPYTOWORLDCHRANGE",
	"STRCPYTOGLOBALCHRANGE",
	"PUSHFUNCTION",
	"CALLSTACK",
	"SCRIPTWAITNAMED",
	"TRANSLATIONRANGE3",
	"GOTOSTACK",
	"ASSIGNSCRIPTARRAY",
	"PUSHSCRIPTARRAY",
	"ADDSCRIPTARRAY",
	"SUBSCRIPTARRAY",
	"MULSCRIPTARRAY",
	"DIVSCRIPTARRAY",
	"MODSCRIPTARRAY",
	"INCSCRIPTARRAY",
	"DECSCRIPTARRAY",
	"ANDSCRIPTARRAY",
	"EORSCRIPTARRAY",
	"ORSCRIPTARRAY",
	"LSSCRIPTARRAY",
	"RSSCRIPTARRAY",
	"PRINTSCRIPTCHARARRAY",
	"PRINTSCRIPTCHRANGE",
	"STRCPYTOSCRIPTCHRANGE",
	"LSPEC5EX",
	"LSPEC5EXRESULT",
	"TRANSLATIONRANGE4",
	"TRANSLATIONRANGE5",
	"PCODE_COMMAND_COUNT"
]

var scriptsInformation : Array = []



# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	return
	var file : FileAccess = FileAccess.open("",FileAccess.READ)

	parseACS(file,0)
	procScript(file,0)
	breakpoint

func parseACS(file : FileAccess, offset : int):
	var startOffset = file.get_position()
	file.seek(offset)
	
	
	var magic = file.get_buffer(4).get_string_from_ascii()
	if magic != "ACS":
		breakpoint
	
	var scriptDirectoryOffset  = file.get_32()
	
	parseScriptDirectory(file,scriptDirectoryOffset )
	print(file.get_position())
	
		
	#file.seek(startOffset)


func parseScriptDirectory(file : FileAccess,offset):
	var startPos = file.get_position()
	file.seek(offset)
	var numberOfScripts = file.get_32()
	
	
	for i in numberOfScripts:
		var scriptNumber = file.get_32()
		var scriptOffset = file.get_32()
		var numberArgs = file.get_32()
		var arr : PackedByteArray = [scriptNumber,scriptOffset,numberArgs]
		scriptsInformation.append(arr)
	
	var numberOfStrings = file.get_32()
	var unk = file.get_32()
	var t = 9
	

func procScript(file:FileAccess,index : int):
	
	var scriptInfo : PackedByteArray = scriptsInformation[index]
	file.seek(scriptInfo[SCRIPT.OFFSET])
	
	var pos = file.get_position()
	var opcode = file.get_32()
	var opcode2 = file.get_32()
	var opcode3 = file.get_32()
	var opcode4 = file.get_32()
	var opcode5 = file.get_32()
	var opcode6 = file.get_32()
	var t =file.is_big_endian()

	breakpoint
	
